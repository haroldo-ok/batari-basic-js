batari Basic - README_UX.txt - Version 1.0 - 2014.05.01

_What_Is_This_Doc?_

  This document is a record of the code differences between the provided 
  bB distribution and batari's official 1.1d distribution.


_64k/64kSC_Related_Changes_

  -numerous changes to statements.c. Look for "REVENG" to find updated code.
  -fixed up ORG/RORG for 64k in score_graphics.asm, 2600basicheader.asm, 
   2600basicfooter.asm, multispritesuperchipheader.asm, and 
   superchipheader.asm.
  -numerous changes to banksw.asm code.

_Additional_Fixes_and_Changes_

  -added -v version output switch to 2600basic (2600bas.c)
  -added missing player1color: check to findlabel() in statements.c
  -updated 2600bas.c and statuements.c to remove first pass output of 
   ROM space left.
  -updated branching handlers in statements.c to warn for last page 
   branch accidental hotspot triggering.
  -added necessary padding when pfheights table is used and near the 
   start of a page. (statements.c)
  -fixed off-by-one mallocs in postprocess.c.
  -fixed **statement overrun in 2600bas.c when code has REM with long 
   horizontal separators.
  -increased **statement setup from 50x50 to 100x100 in 2600bas.c,
   to match some usage in statements.c and avoid overruns.
  -fixed DPC+ kernel screen garbling bug when not using 
   "set kernel_options collision". (DPCplus_kernel.asm)
  -fixed DPC+ stack range pull. Pulling was restoring in reverse order to 
   pushing, and only pulling the first value. (statement.c)
  -fixed DPC+ variable list pull. Pulling was restoring in reverse order to 
   pushing, which batari described as broken. (statement.c)
  -fixed DPC+ COLUM0 color bug. (custom/main.c and DPCplus_kernel.asm)
  -fixed off-by-one bouncy-score bug. (std_kernel.asm)
  -removed variable references to other variables in multisprite.h, as that
   was causing dasm label shifting between passes.
  -added pfread for DPC+. (custom/main.c and statement.c)
  -added "tiny" font to font collection, by popular demand. 
   (score_graphics.asm and score_graphics.asm.tiny)
  -added "dec" command, to do "let" type addition or subtraction in decimal
   mode. (statements.c, statements.h, keywords.c, keywords.h
  -added scorefade constant into the standard kernel, to allow a 
   gradient/colorbar effect. (std_kernel.asm)
  -fixed additional scanline issue in standard kernel when both "set tv pal"
   and "no_blank_lines" were used.
  -modified regular expression in preprocess.lex to allow for player#-#color:
   statements, which enabled batari's existing player#-#color: code.
  -added DPC+ pfclear command. (custom/main.c, statements.c)
  -fixed DPC+ bug whereby a partially displayed virtual sprite at top of the
   screen would prematurely end positioning for the other virtual sprites. 
   (custom/main.c)
  -fixed vertical wrapping of player0 in DPC+ kernel. (custom/main.c and
   DPCplus_kernel.asm)
  -fixed horizontal masking of reflected vsprites. (custom/main.c)
  -fixed pfscore timing in DPC+ pfscore code. (DPCplus_kernel.asm)
  -set COLUBK to 0 as part of DPC+ kernel, so the partial color wouldn't show 
   up before the first line. (DPCplus_kernel.asm)
  -fixed multiplication by powers of two greater than 11 so they still use 
   shifting. (statement.c)
  -added makefiles for Linux, OS X, and Mingw32. "make dist" with the default
   makefile will build bB binaries for all platforms.
  -modified 2600bas.sh to work with OS specific binaries, and allow for spaces
   in path of the bB variable.
  -added includes/indent.sh, a script to tidy 6502/7 assembly source. Used it
   on the standard and DPC+ kernel sources.
  -added documentation: BUGS.txt, COMPILE.txt, README_UX.txt, and 
   ARMCOMPILE.txt 
  -fixed the PF1 data glitch would show up beyond the last line. 
   (DPCplus_kernel.asm)
  -squeezed DPC+ kernel for space, and then squeezed more (custom/main.c)
  -implemented pfscroll for DPC+. (statements.c, custom/main.c)
  -added collision(player0,_player1) for just detecting p0+p1 detection.
   (statements.c)
  -fixed cycle overage in the standard kernel that was corrupting the last 
   line when scrolling.  (std_kernel.asm)
  -fixed another overage in the standard kernel leading into the last line, 
   which was corrupting the first scanline of the last line when scrolling.
   (std_kernel.asm)
  -changed the DPC+ virtual sprite maximum from a constant to a variable 
   amount. (custom/main.c)
  -added quotes to batch file to allow for paths with spaces. (2600bas.bat)
  -added missing "-i" to optimize preprocess commands. (2600bas.bat)
  -removed "asm" preprocessor expression that was causing an assembly block
   to continue past "end" if "end" had an empty line above it.
  -added optional start_queue and end_queue arguments to DPC+ pfscroll, to
   allow for scrolling the color queue, or split screen scrolling. 
   (statements.c, custom/main.c)
  -enable P0 display on the first scanline. (DPCplus_kernel.asm)
  -DPC+ bkcolors: and pfcolors: now only use the actual number of colors 
   listed, similar to playfield:. (statements.c)
  -disabled fast fetching before the minikernel, and reenabled it after.
   (DPCplus_kernel.asm)
  -batari fixed a bug that messed up the results of an if...then 
   statement containing multiple complex () statements. (statements.c)
  -added bbfilter utlity to replace sed for filtering bB symbols out of 
   dasm results.
  -updated 2600basic.sh, 2600bas.bat to use bbfilter.
  -updated dasm to dasm-2.20.11-update-20140124, put dasm source in 
   contrib/src.
  -added install_win.bat, which will update bB and PATH variables on 
   Windows. requires Windows XP SP2 and later.
  -fixed bug where dim and const didn't work with a trailing : separator.
   (statements.c)
  -added install_win.bat, to permanently set bB and PATH variables on Windows
   XP SP2 and later versions of Windows.
  -raised statement size and number of statements from 50 t0 200 (*.c).
  -defined unused DPC zero page memory as var0->var8. (DPCplusbB.h)
  -fixed bug where ; comments were eating lines and had bad linecount.
   (preprocess.lex)
  -fixed page crossing bug with player1colors in last playfield row.
  -add work-around for complex statements causing "Unknown keyword" on 
   "then label". 
  -reordered memory in 2600basic.h so variables var0 to Z are continuous.
  -moved object motion reset prior to user vblank, to allow for Cosmic Ark
   type effects.
